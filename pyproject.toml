[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kh-ocr"
version = "0.1.0"
description = "Production-grade Khmer OCR system with PaddleOCR and KenLM"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Apache-2.0"}
authors = [
    {name = "Niko", email = "niko@khopilot.ai"}
]
keywords = ["ocr", "khmer", "paddleocr", "computer-vision", "nlp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML dependencies - relaxed numpy constraint for compatibility
    "numpy>=1.21.0,<2.0",  # Changed from <1.24.0 to <2.0 for better compatibility
    "opencv-python==4.6.0.66",
    "Pillow==10.4.0",
    
    # OCR and NLP
    "paddleocr==2.7.0",
    "sentencepiece==0.1.99",
    
    # API and service
    "fastapi==0.112.0",
    "uvicorn[standard]==0.30.5",
    "python-multipart==0.0.9",
    "pydantic==2.8.2",
    
    # Data processing
    "pandas>=2.0.0,<3.0.0",  # Relaxed version constraint
    "tqdm==4.66.5",
    
    # Monitoring
    "prometheus-client==0.20.0",
    "psutil==6.0.0",
    
    # Utilities
    "pyyaml==6.0.2",
    "click==8.1.7",
    "python-dotenv==1.0.1",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest==8.3.2",
    "pytest-cov==5.0.0",
    "pytest-asyncio==0.23.8",
    "ruff==0.6.2",
    "mypy==1.11.1",
    "pre-commit==3.8.0",
    "ipython==8.26.0",
]

# GPU dependencies (Linux only)
gpu = [
    "paddlepaddle-gpu==2.6.1; platform_system=='Linux'",
    "onnxruntime-gpu==1.18.1; platform_system=='Linux'",
]

# macOS CPU-only dependencies
macos = [
    "paddlepaddle==2.6.1; platform_system=='Darwin'",
    "onnxruntime==1.18.1; platform_system=='Darwin'",
]

# Training dependencies
train = [
    "tensorboard==2.17.0",
    "wandb==0.17.7",
    "scikit-learn==1.5.1",
    "matplotlib==3.9.2",
    "seaborn==0.13.2",
]

# Evaluation dependencies
eval = [
    "jiwer==3.0.4",  # For WER/CER calculation
    "nltk==3.8.1",
    "rapidfuzz==3.9.6",
]

# Tokenizer dependencies (optional)
transformers = [
    "transformers>=4.30.0",  # For loading HuggingFace tokenizers
]

[project.scripts]
kh-ocr = "kh_ocr.cli:main"

[project.urls]
Homepage = "https://github.com/khopilot/kh-ocr"
Documentation = "https://github.com/khopilot/kh-ocr/docs"
Repository = "https://github.com/khopilot/kh-ocr"
Issues = "https://github.com/khopilot/kh-ocr/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["kh_ocr*", "train*", "infer*", "eval*", "service*", "ops*", "lang*"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=kh_ocr",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["kh_ocr", "train", "infer", "eval", "service", "ops", "lang"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]